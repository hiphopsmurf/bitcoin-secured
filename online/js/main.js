// Generated by CoffeeScript 1.5.0
(function() {
  var AlertCtrl, AppController, DialogCtrl, DownloadCtrl, FormCtrl, ModalCtrl, RegisterCtrl, SubmitCtrl, app;

  app = angular.module("bitcoinSecured", ['ui.bootstrap']).config([
    '$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {
      return $routeProvider.when("/", {
        action: "home.default",
        controller: RegisterCtrl,
        templateUrl: "register.html"
      }).when("/download", {
        action: "download.default",
        controller: DownloadCtrl,
        templateUrl: "download.html"
      });
    }
  ]);

  app.factory("txevent", [
    '$window', function($window) {
      return {
        notify: function(msg) {
          return $window.alert(msg);
        },
        doTrans: function(tx_dest, tx_sec, tx_addr, tx_unspent) {
          var eckey, secret, sendTx, tx;
          secret = $window.Bitcoin.Base58.decode(tx_sec).slice(1, 33);
          eckey = new $window.Bitcoin.ECKey(secret);
          tx = new $window.TX(eckey);
          tx.parseInputs(tx_unspent, tx.getAddress());
          tx.addOutput(tx_dest, 0.1);
          sendTx = tx.construct();
          return console.log($window.Crypto.util.bytesToHex(sendTx.serialize()));
        }
      };
    }
  ]);

  app.directive("qrCode", [
    '$window', function($window) {
      return {
        template: "<div id='qr-code'></div>",
        restrict: 'E',
        scope: {
          localQrMsg: '=myAttr'
        },
        link: function(scope, element, attrs) {
          var el, qr;
          el = angular.element(element);
          return qr = new $window.QRCode(el[0], scope.localQrMsg);
        }
      };
    }
  ]);

  app.controller("AppController", AppController = function($scope, $route, $routeParams) {
    var render;
    render = function() {
      var isDownload, isHome, renderAction, renderPath;
      if (_.isUndefined($route.current.action)) {
        renderAction = "home.default";
      } else {
        renderAction = $route.current.action;
      }
      console.log("render action is: " + renderAction);
      renderPath = renderAction.split(".");
      console.log("render path is: " + renderPath);
      isHome = renderPath[0] === "home";
      isDownload = renderPath[0] === "download";
      $scope.renderAction = renderAction;
      $scope.renderPath = renderPath;
      $scope.isHome = isHome;
      return $scope.isDownload = isDownload;
    };
    return $scope.$on("$routeChangeSuccess", function($currentRoute, $previousRoute) {
      return render();
    });
  });

  app.controller("DownloadCtrl", DownloadCtrl = function($scope) {
    return $scope.downloads = {};
  });

  app.controller("RegisterCtrl", RegisterCtrl = function($scope, $location, $dialog) {
    $scope.appdata = {};
    $scope.steps = ["Enter Data", "Enter Paste"];
    $scope.selection = $scope.steps[0];
    $scope.getCurrentStepIndex = function() {
      return _.indexOf($scope.steps, $scope.selection);
    };
    $scope.goToStep = function(index) {
      if (!_.isUndefined($scope.steps[index])) {
        return $scope.selection = $scope.steps[index];
      }
    };
    $scope.hasNextStep = function() {
      var nextStep, stepIndex;
      stepIndex = $scope.getCurrentStepIndex();
      nextStep = stepIndex + 1;
      return !_.isUndefined($scope.steps[nextStep]);
    };
    $scope.hasPreviousStep = function() {
      var previousStep, stepIndex;
      stepIndex = $scope.getCurrentStepIndex();
      previousStep = stepIndex - 1;
      return !_.isUndefined($scope.steps[previousStep]);
    };
    $scope.incrementStep = function() {
      var nextStep, stepIndex;
      if ($scope.hasNextStep()) {
        stepIndex = $scope.getCurrentStepIndex();
        nextStep = stepIndex + 1;
        return $scope.selection = $scope.steps[nextStep];
      }
    };
    $scope.decrementStep = function() {
      var previousStep, stepIndex;
      if ($scope.hasPreviousStep()) {
        stepIndex = $scope.getCurrentStepIndex();
        previousStep = stepIndex - 1;
        return $scope.selection = $scope.steps[previousStep];
      }
    };
    $scope.openModal = function() {
      console.log("opening modal");
      return $scope.shouldBeOpen = true;
    };
    $scope.closeModal = function() {
      $scope.closeMsg = "I was closed at: " + new Date();
      return $scope.shouldBeOpen = false;
    };
    return $scope.modalOpts = {
      backdropFade: true,
      dialogFade: true
    };
  });

  app.controller("ModalCtrl", ModalCtrl = function($scope) {});

  app.controller("FormCtrl", FormCtrl = function($scope, $http, $dialog) {
    $scope.rawtx = "";
    $scope.buttonState = {};
    $scope.buttonState.qrcodestate = "disabled";
    $scope.transaction = {};
    $scope.loadUrl = function() {
      var q, tx;
      q = "/blockchain/unspent?address=" + $scope.transaction.address;
      tx = {};
      tx.dest = $scope.transaction.recipient;
      $scope.appdata.dest = tx.dest;
      tx.addr = $scope.transaction.address;
      tx.amount = $scope.transaction.amount;
      tx.fee = $scope.transaction.fee;
      $http.get(q).success(function(data, status) {
        console.log(data);
        console.log(status);
        tx.unspent = data;
        return $scope.appdata.rawtx = JSON.stringify(tx);
      });
      return true;
    };
    $scope.processForm = function() {
      console.log("Processing form...");
      $scope.loadUrl();
      return $scope.openNotice(key_to_english($scope.appdata.dest));
    };
    $scope.showQr = function() {
      return $scope.openDialog($scope.appdata.rawtx);
    };
    $scope.clearAll = function(e) {
      e.preventDefault();
      $scope.transaction = {};
      return $scope.paste = "";
    };
    $scope.openDialog = function(msg) {
      var d, opts, t;
      t = "<div id=\"modal\">\n    <qr-code my-attr=\"msg\"></qr-code>\n</div>";
      opts = {
        template: t,
        dialogClass: "modal qr-modal",
        controller: "DialogCtrl",
        backdrop: true,
        resolve: {
          msg: function() {
            return angular.copy(msg);
          }
        }
      };
      d = $dialog.dialog(opts);
      return d.open().then(function(result) {
        if (result === 'ok') {
          return console.log("Your transaction is ok");
        } else {
          return console.log("Your transaction is cancelled");
        }
      });
    };
    return $scope.openNotice = function(msg) {
      var d, opts, t;
      t = "<div id=\"notice-modal\">\n  <div class=\"modal-header\">\n    <h3>Security Phrase</h3>\n  </div>\n  <div class=\"modal-body\">\n    <p>The phrase below is your security phrase.  The same phrase will be shown to you again when you enter your offline transaction.  If you notice any difference between the two phrases, please abandon the offline signing process.</p>\n    <div>\n      <h3>\"{{msg}}\"</h3>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button ng-click=\"close(result)\" class=\"btn btn-primary\" >I understand</button>\n  </div>\n</div>";
      opts = {
        template: t,
        dialogClass: "modal notice-modal",
        controller: "DialogCtrl",
        backdrop: true,
        resolve: {
          msg: function() {
            return angular.copy(msg);
          }
        }
      };
      d = $dialog.dialog(opts);
      return d.open().then(function(result) {
        if (result === 'ok') {
          return console.log("Your transaction is ok");
        } else {
          return console.log("Your transaction is cancelled");
        }
      });
    };
  });

  app.controller("SubmitCtrl", SubmitCtrl = function($scope) {
    return $scope.submitTx = function() {
      var config;
      config = {};
      config.url = "/blockchain/pushtx";
      config.data = JSON.stringify($scope.rawpaste);
      config.method = 'POST';
      return $http(config).success(function(data, status) {
        console.log(data);
        return console.log(status);
      });
    };
  });

  app.controller("DialogCtrl", DialogCtrl = function($scope, msg, dialog) {
    $scope.close = function(result) {
      return dialog.close(result);
    };
    return $scope.msg = msg;
  });

  app.controller("AlertCtrl", AlertCtrl = function($scope) {
    $scope.alerts = [
      {
        type: "error",
        msg: "Bitcoin Secured 0.1 is beta quality software. As such, there is a small but real chance of software error. Please don't use this system to transfer large amounts of Bitcoins until this beta notice is removed."
      }
    ];
    $scope.addAlert = function(msg) {
      return $scope.alerts.push({
        msg: msg
      });
    };
    return $scope.closeAlert = function(index) {
      return $scope.alerts.splice(index, 1);
    };
  });

}).call(this);
